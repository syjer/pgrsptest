buildscript {
	ext {
		springBootVersion = '2.1.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath 'com.opentable.components:otj-pg-embedded:0.13.3'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.syjer.pgrsptest'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	implementation('org.springframework.boot:spring-boot-starter-jdbc')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	compile 'org.flywaydb:flyway-core:5.2.1'
	runtimeOnly('org.postgresql:postgresql')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
}




import java.nio.file.Files
import java.nio.file.Paths
import com.opentable.db.postgres.embedded.EmbeddedPostgres
import com.opentable.db.postgres.embedded.PgBinaryResolver
import static java.lang.String.format
import org.apache.commons.lang3.SystemUtils
import org.apache.commons.io.FileUtils
import org.apache.commons.io.IOUtils



task startEmbeddedPgSQL {
	doLast {

		def pgsqlPath = Paths.get(System.getProperty("user.dir"), "pgrsptest-itest")
		Files.createDirectories(pgsqlPath)
		def tmpDataDir = Files.createTempDirectory(pgsqlPath, "pgrsptest-data")

		def binDir = "pgrsptest-pg-bin"+(UUID.randomUUID().toString())
		def postgresBinariesDir = Files.createDirectories(pgsqlPath.resolve(binDir)).toAbsolutePath().toFile()

		def postgres = EmbeddedPostgres.builder()
				.setPort(5432)
				.setDataDirectory(tmpDataDir)
				.setOverrideWorkingDirectory(postgresBinariesDir)
		// we are doing this because there is an unfortunate interplay with the persistence of the gradle daemon and
		// EmbeddedPostgres.PREPARE_BINARIES (which is a static field)
		// this cause to reuse a wrong directory
				.setPgBinaryResolver(new PgBinaryResolver() {
					@Override
					InputStream getPgBinary(String system, String machineHardware) {
						return EmbeddedPostgres.class.getResourceAsStream(format("/postgresql-%s-%s.txz", system, machineHardware));
					}
				})
				.start()
		Files.write(Paths.get(".", "pgrsptest-itest", "pgsql-descriptor"), Arrays.asList(tmpDataDir.toAbsolutePath().toFile().toString(), postgresBinariesDir.toString()))
		System.out.println("Launched pgsql")
	}
}


// code imported from EmbeddedPostgres :D
String pgBin(File pgDirBase, String binaryName) {
	final pgDir = pgDirBase.listFiles(new FileFilter() {
		@Override
		boolean accept(File file) {
			return file.getName().startsWith("PG-") && file.isDirectory()
		}
	})[0]
	final String extension = SystemUtils.IS_OS_WINDOWS ? ".exe" : ""
	return new File(pgDir, "bin/" + binaryName + extension).getPath()
}

void system(String... command) {
	final ProcessBuilder builder = new ProcessBuilder(command)
	final Process process = builder.start()
	if (0 != process.waitFor()) {
		throw new IllegalStateException(String.format("Process %s failed%n%s", Arrays.asList(command), IOUtils.toString(process.getErrorStream())))
	}
}

void pgCtl(File binDir, File dataDir, String action) {
	system(pgBin(binDir, "pg_ctl"), "-D", dataDir.getPath(), action, "-m", "fast", "-t", "5", "-w")
}


task stopEmbeddedPgSQL {
	doLast {
		def descriptor = Paths.get(".", "pgrsptest-itest", "pgsql-descriptor")

		if (!Files.exists(descriptor)) {
			System.out.println("No pid file, you may need to remove manually the pgrsptest-itest folder")
			return
		}

		def r = Files.readAllLines(descriptor)
		def dataDir = new File(r.get(0))
		def binariesDir = new File(r.get(1))

		pgCtl(binariesDir, dataDir, "stop")
		Files.deleteIfExists(descriptor)
		FileUtils.deleteDirectory(dataDir)
		FileUtils.deleteDirectory(binariesDir)
		System.out.println("Stopped postgresql")
	}
}